# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rgl/all/rgl.rbi
#
# rgl-0.5.7

module RGL
end
class RGL::NotDirectedError < RuntimeError
end
class RGL::NotUndirectedError < RuntimeError
end
class RGL::NoVertexError < IndexError
end
class RGL::NoEdgeError < IndexError
end
module RGL::Edge
end
class RGL::Edge::DirectedEdge
  def <=>(e); end
  def ==(edge); end
  def [](index); end
  def eql?(edge); end
  def hash; end
  def initialize(a, b); end
  def inspect; end
  def reverse; end
  def self.[](*a); end
  def source; end
  def source=(arg0); end
  def target; end
  def target=(arg0); end
  def to_a; end
  def to_s; end
end
class RGL::Edge::UnDirectedEdge < RGL::Edge::DirectedEdge
  def eql?(edge); end
  def to_s; end
end
module RGL::Graph
  def ==(other); end
  def adjacent_vertices(v); end
  def bfs_iterator(v = nil); end
  def bfs_search_tree_from(v); end
  def depth_first_search(vis = nil, &b); end
  def depth_first_visit(u, vis = nil, &b); end
  def dfs_iterator(v = nil); end
  def dijkstra_shortest_path(edge_weights_map, source, target, visitor = nil); end
  def dijkstra_shortest_paths(edge_weights_map, source, visitor = nil); end
  def directed?; end
  def each(&block); end
  def each_adjacent(v); end
  def each_edge(&block); end
  def each_edge_aux; end
  def each_vertex; end
  def edge_class; end
  def edges; end
  def edges_filtered_by(&filter); end
  def empty?; end
  def eql?(other); end
  def eql_edges_set?(other); end
  def eql_graph?(other); end
  def eql_vertices_set?(other); end
  def has_vertex?(v); end
  def implicit_graph; end
  def maximum_flow(edge_capacities_map, source, sink); end
  def num_edges; end
  def num_vertices; end
  def out_degree(v); end
  def reverse; end
  def size; end
  def to_adjacency; end
  def to_s; end
  def to_undirected; end
  def vertices; end
  def vertices_filtered_by(&filter); end
  include Enumerable
  include RGL::Edge
end
module RGL::MutableGraph
  def add_edge(u, v); end
  def add_edges(*edges); end
  def add_vertex(v); end
  def add_vertices(*a); end
  def cycles; end
  def cycles_with_vertex(vertex); end
  def cycles_with_vertex_helper(vertex, start, visited); end
  def remove_edge(u, v); end
  def remove_vertex(v); end
  def remove_vertices(*a); end
  include RGL::Graph
end
class RGL::DirectedAdjacencyGraph
  def add_edge(u, v); end
  def add_vertex(v); end
  def basic_add_edge(u, v); end
  def directed?; end
  def each_adjacent(v, &b); end
  def each_vertex(&b); end
  def edgelist_class=(klass); end
  def has_edge?(u, v); end
  def has_vertex?(v); end
  def initialize(edgelist_class = nil, *other_graphs); end
  def initialize_copy(orig); end
  def remove_edge(u, v); end
  def remove_vertex(v); end
  def self.[](*a); end
  include RGL::MutableGraph
end
class RGL::AdjacencyGraph < RGL::DirectedAdjacencyGraph
  def basic_add_edge(u, v); end
  def directed?; end
  def remove_edge(u, v); end
end
class RGL::ImplicitGraph
  def adjacent_iterator(&block); end
  def directed=(arg0); end
  def directed?; end
  def each_adjacent(v, &block); end
  def each_edge(&block); end
  def each_vertex(&block); end
  def edge_iterator(&block); end
  def initialize; end
  def vertex_iterator(&block); end
  include RGL::Graph
end
module RGL::GraphWrapper
  def graph; end
  def graph=(arg0); end
  def initialize(graph); end
end
module RGL::GraphVisitor
  def attach_distance_map(map = nil); end
  def color_map; end
  def finished_vertex?(v); end
  def follow_edge?(u, v); end
  def handle_back_edge(u, v); end
  def handle_examine_edge(u, v); end
  def handle_examine_vertex(u); end
  def handle_finish_vertex(u); end
  def handle_forward_edge(u, v); end
  def handle_tree_edge(u, v); end
  def initialize(graph); end
  def reset; end
  def self.included(base); end
  def set_back_edge_event_handler(&block); end
  def set_examine_edge_event_handler(&block); end
  def set_examine_vertex_event_handler(&block); end
  def set_finish_vertex_event_handler(&block); end
  def set_forward_edge_event_handler(&block); end
  def set_tree_edge_event_handler(&block); end
  extend RGL::GraphVisitor::ClassMethods
  include RGL::GraphWrapper
end
module RGL::GraphVisitor::DistanceMapSupport
  def distance_to_root(v); end
  def handle_tree_edge(u, v); end
end
module RGL::GraphVisitor::ClassMethods
  def def_event_handler(*events); end
  def def_event_handlers(*events); end
end
module RGL::GraphIterator
  def length; end
  include RGL::GraphWrapper
  include Stream
end
class RGL::BFSIterator
  def at_beginning?; end
  def at_end?; end
  def basic_forward; end
  def initialize(graph, start = nil); end
  def next_vertex; end
  def set_to_begin; end
  def start_vertex; end
  def start_vertex=(arg0); end
  extend RGL::GraphVisitor::ClassMethods
  include RGL::GraphIterator
  include RGL::GraphVisitor
end
class RGL::DFSIterator < RGL::BFSIterator
  def next_vertex; end
end
class RGL::DFSVisitor
  def handle_start_vertex(u); end
  def set_start_vertex_event_handler(&block); end
  extend RGL::GraphVisitor::ClassMethods
  include RGL::GraphVisitor
end
class RGL::EdgePropertiesMap
  def check_properties; end
  def edge_property(u, v); end
  def initialize(edge_properties_map, directed); end
  def report_missing_property(property, u, v); end
  def validate_property(property, u, v); end
end
class RGL::NonNegativeEdgePropertiesMap < RGL::EdgePropertiesMap
  def report_negative_property(property, u, v); end
  def validate_property(property, u, v); end
end
class RGL::EdmondsKarpAlgorithm
  def get_capacity(u, v, edge_capacities_map); end
  def initialize(graph, edge_capacities_map); end
  def maximum_flow(source, sink); end
  def validate_capacity(u, v, edge_capacities_map); end
  def validate_edge_capacities(edge_capacities_map); end
  def validate_negative_capacity(u, v, capacity); end
end
class RGL::EdmondsKarpAlgorithm::EdmondsKarpBFSIterator < RGL::BFSIterator
  def follow_edge?(u, v); end
  def handle_tree_edge(u, v); end
  def initialize(graph, start, stop, residual_capacities); end
  def parents_map; end
  def parents_map=(arg0); end
  def reset; end
end
class RGL::DijkstraVisitor
  def distance_map; end
  def distance_map=(arg0); end
  def handle_edge_not_relaxed(u, v); end
  def handle_edge_relaxed(u, v); end
  def parents_map; end
  def parents_map=(arg0); end
  def reset; end
  def set_edge_not_relaxed_event_handler(&block); end
  def set_edge_relaxed_event_handler(&block); end
  def set_source(source); end
  extend RGL::GraphVisitor::ClassMethods
  include RGL::GraphVisitor
end
class RGL::PathBuilder
  def initialize(source, parents_map); end
  def path(target); end
  def paths(targets); end
  def restore_path(target); end
end
class RGL::DijkstraAlgorithm
  def build_edge_weights_map(edge_weights_map); end
  def find_shortest_paths(source); end
  def init(source); end
  def initialize(graph, edge_weights_map, visitor, distance_combinator = nil); end
  def relax_edge(u, v); end
  def relax_edges(target = nil, break_on_target = nil); end
  def shortest_path(source, target); end
  def shortest_paths(source); end
end
