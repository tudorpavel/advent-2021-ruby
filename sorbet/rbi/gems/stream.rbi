# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/stream/all/stream.rbi
#
# stream-0.5.3

module Stream
  def +(other); end
  def at_beginning?; end
  def at_end?; end
  def backward; end
  def basic_backward; end
  def basic_current; end
  def basic_forward; end
  def basic_peek; end
  def collect(&mapping); end
  def concatenate; end
  def concatenate_collected(&mapping); end
  def create_stream; end
  def current; end
  def current_edge; end
  def each; end
  def empty?; end
  def filtered(&block); end
  def first; end
  def forward; end
  def last; end
  def modify(&block); end
  def move_backward_until; end
  def move_forward_until; end
  def peek; end
  def remove_first; end
  def remove_last; end
  def reverse; end
  def set_to_begin; end
  def set_to_end; end
  def unwrapped; end
  include Enumerable
end
class Stream::EndOfStreamException < StandardError
end
class Stream::BasicStream
  include Stream
end
class Stream::EmptyStream < Stream::BasicStream
  def at_beginning?; end
  def at_end?; end
  def basic_backward; end
  def basic_forward; end
  def self.allocate; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Stream::CollectionStream < Stream::BasicStream
  def at_beginning?; end
  def at_end?; end
  def basic_backward; end
  def basic_current; end
  def basic_forward; end
  def basic_peek; end
  def initialize(seq); end
  def pos; end
  def set_to_begin; end
  def set_to_end; end
end
class Stream::IntervalStream < Stream::BasicStream
  def at_beginning?; end
  def at_end?; end
  def basic_backward; end
  def basic_forward; end
  def increment_stop(incr = nil); end
  def initialize(stop = nil); end
  def pos; end
  def set_to_begin; end
  def set_to_end; end
end
class Stream::WrappedStream < Stream::BasicStream
  def at_beginning?; end
  def at_end?; end
  def basic_backward; end
  def basic_forward; end
  def initialize(other_stream); end
  def set_to_begin; end
  def set_to_end; end
  def unwrapped; end
  def wrapped_stream; end
end
class Stream::FilteredStream < Stream::WrappedStream
  def at_beginning?; end
  def at_end?; end
  def basic_backward; end
  def basic_forward; end
  def initialize(other_stream, &filter); end
  def pos; end
  def set_to_begin; end
  def set_to_end; end
end
class Stream::ReversedStream < Stream::WrappedStream
  def at_beginning?; end
  def at_end?; end
  def basic_backward; end
  def basic_forward; end
  def initialize(other_stream); end
  def set_to_begin; end
  def set_to_end; end
end
class Stream::MappedStream < Stream::WrappedStream
  def basic_backward; end
  def basic_forward; end
  def initialize(other_stream, &mapping); end
end
class Stream::ConcatenatedStream < Stream::WrappedStream
  def at_beginning?; end
  def at_end?; end
  def basic_backward; end
  def basic_forward; end
  def initialize(streamOfStreams); end
  def reached_boundary; end
  def set_to_begin; end
  def set_to_end; end
  def streamOfStreams; end
end
class Stream::ImplicitStream < Stream::BasicStream
  def at_beginning?; end
  def at_beginning_proc=(arg0); end
  def at_end?; end
  def at_end_proc=(arg0); end
  def backward_proc=(arg0); end
  def basic_backward; end
  def basic_forward; end
  def forward_proc=(arg0); end
  def initialize(other_stream = nil); end
  def set_to_begin; end
  def set_to_begin_proc=(arg0); end
  def set_to_end; end
  def set_to_end_proc=(arg0); end
  def wrapped_stream; end
end
class Array
  def create_stream; end
end
module Enumerable
  def create_stream; end
end
