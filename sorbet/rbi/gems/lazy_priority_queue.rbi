# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/lazy_priority_queue/all/lazy_priority_queue.rbi
#
# lazy_priority_queue-0.1.1

class LazyPriorityQueue
  def add(node_one, node_two); end
  def change_priority(element, new_key); end
  def coalesce(trees); end
  def delete(element); end
  def dequeue; end
  def empty?; end
  def enqueue(element, key); end
  def initialize(top_condition, &heap_property); end
  def insert(element, key); end
  def length; end
  def peek; end
  def pop; end
  def push(element, key); end
  def select(parent_node, child_node); end
  def sift_up(node); end
  def size; end
end
class LazyPriorityQueue::Node < Struct
  def element; end
  def element=(_); end
  def key; end
  def key=(_); end
  def left_child; end
  def left_child=(_); end
  def parent; end
  def parent=(_); end
  def rank; end
  def rank=(_); end
  def right_sibling; end
  def right_sibling=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class MinPriorityQueue < LazyPriorityQueue
  def decrease_key(element, new_key); end
  def extract_min; end
  def initialize; end
  def min; end
end
class MaxPriorityQueue < LazyPriorityQueue
  def extract_max; end
  def increase_key(element, new_key); end
  def initialize; end
  def max; end
end
